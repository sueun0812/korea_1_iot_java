package chapter06;

// === 오버라이딩 ===
// : 자식 클래스가 부모 클래스에서 정의된 메서드를 자신의 상황에 맞게 재정의
// >> 상속 관계에 있는 클래스들 사이에서 사용

// 1. 오버라이딩 특징
// - 메서드의 시그니처가 일치
// >> 부모 클래스에서 정의된 메서드와 동일한 이름, 매개변수 구성을 가져야 함
// - 반환 타입은 같거나 자동 형 변환이 가능한 것이어야 함
// - @Override (어노테이션, 주석)
// : 오버라이딩 된 메서드임을 명시적으로 표시

// cf) 선언부
// : 반환타입 메서드명(매개변수)

// 2. 오버라이딩 구현 방법
// - 부모 클래스의 상속받은 메서드를 자식 클래스에서 다시 정의
// - 메서드의 이름, 매개변수를 일치, 반환 타입은 같거나 자동 형 변환 가능하게 작성
// - 메서드 위에 @Override 어노테이션을 작성

// 3. 오버라이딩을 사용하는 이유
// - 다형성 구현
// : 하나의 이름으로 여러 기능을 수행하는 코드 작성이 가능
//- 재사용성과 확장성 향상
// : 기존 코드 변경없이 새로운 기능을 추가하거나 변경 가능

class AnimalClass {
	void sound() {
		System.out.println("동물이 소리를 냅니다.");
	}
}

class DogClass extends AnimalClass {
	// void 메서드가 생략
	void sound() {
		System.out.println("개가 멍멍하고 짖습니다.");
	}
}

public class Overring {

	public static void main(String[] args) {
		
		DogClass dog1 = new DogClass();
		dog1.sound();

	}

}
