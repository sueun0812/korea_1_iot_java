package chapter09;

// 인터페이스 (Interface)
// : 객체가 어떤 방식으로 동작해야 하는지를 정의하는 추상 타입
// >> 추상 메서드와 상수만으로 구성된 특수한 클래스
// >> 모든 메서드가 추상 메서드인 추상 클래스와 유사
// - 객체의 기능을 정의하고 실제 구현은 인터페이스를 구현하는 클래스에서 담당

// === 인터페이스의 필요성 ===
// : 서로 다른 클래스에 대해 공통된 동작을 보장할 때
// : 여러 인터페이스를 동시에 구현 가능
// >> 한 클래스에 대해 여러 개의 인터페이스 구현이 가능

// === 인터페이스 구현 방법 ===
// interface 키워드를 사용하여 선언

// 깃허브에서 가져오기 !!!!!!!!!!

// 카드 게임에 대한 정의
// interface 인터페이스명 {

// }
// >> 접근 제어자로 public과 default만 사용 가능
interface PlayingCard {
	// 1. 멤버 변수 가질 수 있음
	// : public static final 특성을 가짐
	// >> 해당 키워드들이 생략 가능
	// >> 타입 상수명 = 값;
	public static final int Spade = 4;
	final int Diamond = 3;
	static int Heart = 2;
	int Clover = 1;
	
	// 2. 메서드 가질 수 있음 (public abstract이 항상 포함)
	// >> 반드시 모든 메서드는 추상 메서드여야 함 (abstract 키워드 생략 가능)
	// >> 해당 인터페이스의 활용을 위해 모든 클래스에서 접근 가능 (public 키워드 생략 가능)
	
	public abstract String getCardNumber();
	String getCardkind();
}

// = 인터페이스 구현 =
// >> 클래스에 implements 키워드를 사용하여 인터페이스 구현
class Card implements PlayingCard {
	private String cardNumber;
	private String cardKind;
	
	public Card(String cardNumber, String cardKind) {
		this.cardKind = cardKind;
		this.cardNumber = cardNumber;
	}
	
	// 인터페이스 안의 메서드를 구현한 클래스 메서드는 public 지정
	public String getCardNumber() {
		return cardNumber;
	}
	
	public String getCardKind() {
		return cardKind;
	}
}

public class B_Interface {

	public static void main(String[] args) {
		Card card = new Card("7", "Heart");
		System.out.println(card.getCardNumber());
		System.out.println(card.getCardKind());

	}

}
